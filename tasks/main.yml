---
- name: set vars
  set_fact:
    docker_image: '{{ role_pihole_image }}'
    docker_container: '{{ role_pihole_container }}'
    docker_tz: '{{ role_pihole_tz }}'
    docker_volume_data: '{{ role_pihole_volume }}_data'
    docker_volume_dnsmasq: '{{ role_pihole_volume }}_dnsmasq'
    docker_network: '{{ role_pihole_network }}'

- name: Ensure image is pulled
  community.docker.docker_image:
    name: '{{ docker_image }}'
    source: pull
    force_source: yes
  register: pulled

- name: Remove container
  community.docker.docker_container:
    name: '{{ docker_container }}'
    state: absent
  when: pulled.changed

- name: Get infos on container
  community.docker.docker_container_info:
    name: '{{ docker_container }}'
  register: result

- name: Create data volume
  community.docker.docker_volume:
    name: "{{ docker_volume_data }}"

- name: Create dnsmasq volume
  community.docker.docker_volume:
    name: "{{ docker_volume_dnsmasq }}"

- name: Create network
  community.docker.docker_network:
    name: '{{ docker_network }}'
    driver_options:
      com.docker.network.bridge.name: 'br-{{ docker_network }}'

- name: Create pihole container
  community.docker.docker_container:
    image: '{{ docker_image }}'
    volumes:
     - '{{ docker_volume_data }}:/etc/pihole:Z'
     - '{{ docker_volume_dnsmasq }}:/etc/dnsmasq.d:Z'
    env:
      TZ: '{{ docker_tz }}'
    ports:
      - '53:53/tcp'
      - '53:53/udp'
    name: '{{ docker_container }}'
    networks:
     - name: '{{ docker_network }}'
    restart_policy: unless-stopped
    state: started
  when:
    pulled.changed
    or
    result.exists == false
